class Solution 
{ 
    // Returns the maximum value that can be put in a knapsack of capacity W 
    static int knapSack(int w, int wt[], int val[], int n) 
    { 
         // your code here 
         int dp[][]=new int[n+1][w+1];
         for(int i=0;i<n;i++){
             dp[i][0]=0;
         }
         for(int j=1;j<=w;j++){
             dp[0][j]=0;
         }
         for(int i=1;i<=n;i++){
             for(int j=1;j<=w;j++){
                 if(j<wt[i-1]){
                     dp[i][j]=dp[i-1][j];
                 }
                 else{
                    dp[i][j]=Math.max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                 }
             }
         }
         return dp[n][w];
    } 
}



link : https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1
